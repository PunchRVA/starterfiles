@mixin grid-left($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='left'],
	.grid[data-grid#{$modifier}*=' left'] {
		justify-content: flex-start;

		> .grid__item {
			display: block;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				text-align: left;
				> .grid__item {
					display: inline-block;
					text-align: left;
				}
			}
		}
	}

}

@mixin grid-center($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='center'],
	.grid[data-grid#{$modifier}*=' center'] {
		justify-content: center;

		> .grid__item {
			display: block;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				text-align: center;
				> .grid__item {
					display: inline-block;
					text-align: left;
				}
			}
		}
	}

}

@mixin grid-right($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='right'],
	.grid[data-grid#{$modifier}*=' right'] {
		justify-content: flex-end;

		> .grid__item {
			display: block;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				text-align: right;
				> .grid__item {
					display: inline-block;
					text-align: left;
				}
			}
		}
	}

}

@mixin grid-top($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='top'],
	.grid[data-grid#{$modifier}*=' top'] {
		align-items: flex-start;

		> .grid__item {
			display: block;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				> .grid__item {
					display: inline-block;
					vertical-align: top;
				}
			}
		}
	}

}

@mixin grid-middle($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='middle'],
	.grid[data-grid#{$modifier}*=' middle'] {
		align-items: center;

		> .grid__item {
			display: block;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				> .grid__item {
					display: inline-block;
					vertical-align: middle;
				}
			}
		}
	}

}

@mixin grid-bottom($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='bottom'],
	.grid[data-grid#{$modifier}*='bottom'] {
		align-items: flex-end;

		> .grid__item {
			display: block;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				> .grid__item {
					display: inline-block;
					vertical-align: bottom;
				}
			}
		}
	}

}

@mixin grid-forwards($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='forwards'],
	.grid[data-grid#{$modifier}*=' forwards'] {
		flex-direction: row;
		flex-wrap: wrap;

		> .grid__item {
			display: block;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				direction: ltr;
				> .grid__item {
					display: inline-block;
				}
			}
		}
	}

}

@mixin grid-backwards($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='backwards'],
	.grid[data-grid#{$modifier}*=' backwards'] {
		flex-direction: row-reverse;
		flex-wrap: wrap-reverse;

		> .grid__item {
			display: block;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				direction: rtl;
				> .grid__item {
					display: inline-block;
					direction: ltr;
				}
			}
		}
	}

}

@mixin grid-between($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='between'],
	.grid[data-grid#{$modifier}*=' between'] {
		justify-content: space-between;

		> .grid__item {
			display: block;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				text-align: center;
				> .grid__item {
					display: inline-block;
					text-align: left;
				}
			}
		}
	}

}

@mixin grid-around($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='around'],
	.grid[data-grid#{$modifier}*=' around'] {
		justify-content: space-around;

		> .grid__item {
			display: block;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				text-align: center;
				> .grid__item {
					display: inline-block;
					text-align: left;
				}
			}
		}
	}

}

@mixin grid-equal($modifier: '') {

	$modifier: add-dashes-to-modifier($modifier);

	.grid[data-grid#{$modifier}^='equal'],
	.grid[data-grid#{$modifier}*=' equal'] {
		align-items: stretch;

		> .grid__item {
			display: flex;
		}

		@if grid-option('fallback') {
			.no-flexbox & {
				> .grid__item {
					display: inline-block;
				}
			}
		}
	}

}